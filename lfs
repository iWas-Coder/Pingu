#!/bin/bash

PINGU=$PWD

# === Colours === #
C_RESET='\033[0m'
C_RED='\033[1;31m'
C_GREEN='\033[1;32m'
C_YELLOW='\033[1;33m'
C_PURPLE='\033[1;35m'
C_CYAN='\033[1;36m'
C_WHITE='\033[1;37m'

# === Separator line === #
separator () {
  printf '%.sâ”€' $(seq 1 $(tput cols))
}

# === Ctrl+C handling === #
ctrl_c () {
  echo -e "\n[!] Exiting..."
  tput cnorm; exit 1
}
trap ctrl_c INT


####################################################################
#######################     CHECKER     ############################
####################################################################
separator

# Install basic packages for the host
cat assets/pkgs/arch/0-basic_pkgs | xargs pacman -Sy --noconfirm
clear
export LC_ALL=C

check_if () {
  echo -ne "${C_WHITE}[*] ${C_PURPLE}${1}${C_WHITE}"
  if command -v $1 &>/dev/null; then
    echo -e " ... ${C_GREEN}OK${C_RESET}"
  else
    echo -e " ... ${C_RED}ERROR${C_RESET}"
  fi
}

# Bash
check_if bash

# Sh
MYSH=$(readlink -f /bin/sh)
echo -ne "${C_WHITE}[*] ${C_PURPLE}/bin/sh${C_WHITE} -> ${C_PURPLE}$MYSH${C_WHITE}"
echo $MYSH | grep -q bash \
&& echo -e " ... ${C_GREEN}OK${C_RESET}" \
|| echo -e " ... ${RED}ERROR${C_RESET}"
unset MYSH

# Binutils
check_if ld

# Bison
check_if bison

# Yacc
$MYYACC=$(readlink -f /usr/bin/yacc)
if [ -h /usr/bin/yacc ]; then
echo -e "${C_WHITE}[*] ${C_PURPLE}/usr/bin/yacc${C_WHITE} -> ${C_PURPLE}$MYYACC${C_WHITE} ... ${C_GREEN}OK${C_RESET}"
elif [ -x /usr/bin/yacc ]; then
  echo -e "${C_WHITE}[*] ${C_PURPLE}yacc${C_WHITE}  ... ${C_GREEN}OK${C_RESET}"
else
  echo -e "${C_WHITE}[*] ${C_PURPLE}yacc${C_WHITE}  ... ${C_RED}ERROR${C_RESET}"
fi
unset MYYACC

# Coreutils
check_if chown
check_if diff
check_if find
check_if gawk

# Awk
$MYAWK=$(readlink -f /usr/bin/awk)
if [ -h /usr/bin/awk ]; then
echo -e "${C_WHITE}[*] ${C_PURPLE}/usr/bin/awk${C_WHITE} -> ${C_PURPLE}$MYAWK${C_WHITE} ... ${C_GREEN}OK${C_RESET}"
elif [ -x /usr/bin/awk ]; then
  echo -e "${C_WHITE}[*] ${C_PURPLE}awk${C_WHITE}  ... ${C_GREEN}OK${C_RESET}"
else
  echo -e "${C_WHITE}[*] ${C_PURPLE}awk${C_WHITE}  ... ${C_RED}ERROR${C_RESET}"
fi
unset MYAWK

# Other tools
check_if gcc
check_if g++
check_if grep
check_if gzip
check_if m4
check_if make
check_if patch
check_if perl
check_if python3
check_if sed
check_if tar
check_if makeinfo
check_if xz

# Compilation test
echo 'int main(){}' > dummy.c && g++ -o dummy dummy.c
if [ -x dummy ]; then
  echo -e "${C_WHITE}[*] ${C_PURPLE}Compilation (g++)${C_WHITE}  ... ${C_GREEN}OK${C_RESET}"
else
  echo -e "${C_WHITE}[*] ${C_PURPLE}Compilation (g++)${C_WHITE}  ... ${C_RED}ERROR${C_RESET}"
fi
rm -f dummy.c dummy

separator

sleep 5
sudo whoami &>/dev/null
clear

####################################################################
###############     COMPILING A CROSS-TOOLCHAIN     ################
####################################################################
export LFS="/mnt/lfs"
echo -e "${C_WHITE}[${C_RED}0${C_WHITE}] ${CYAN}Downloading Cross-Toolchain PKGs...${C_WHITE} (${C_PURPLE}$LFS/tools${C_WHITE})"
pushd $LFS &>/dev/null && mkdir tools && cd $_

for line in $(cat $PINGU/assets/pkgs/lfs/0-cross_toolchain_pkgs); do
  ver=$(echo $line | awk -F',' '{print $2}')
  line=$(echo $line | sed "s/@/$ver/g")
  pkg=$(echo $line | awk -F',' '{print $1}')
  url=$(echo $line | awk -F',' '{print $3}')
  sig=$(echo $line | awk -F',' '{print $4}' | tr -d '\r')
    
  mkdir $pkg && cd $_
  echo -e "\tGET\t$pkg"
  wget -q "$url"
  wget -q "$sig"
  url_file=$(echo $url | rev | cut -d '/' -f 1 | rev)
  sig_file=$(echo $sig | rev | cut -d '/' -f 1 | rev)

  # GNU
  echo $sig | grep -q gnu \
    && wget -q "https://ftp.gnu.org/gnu/gnu-keyring.gpg" \
    && echo -ne "\tVERIFY\t$pkg ... " \
    && gpg --verify --keyring ./gnu-keyring.gpg $sig_file $url_file &>/dev/null \
    && echo "OK"
    
  # Linux Kernel
  echo $sig | grep -q kernel \
    && echo -ne "\tVERIFY\t$pkg ... " \
    && gpg --locate-keys torvalds@kernel.org gregkh@kernel.org &>/dev/null \
    && gzip -d $url_file \
    && linux_file=${url_file::-3} \
    && gpg --verify $sig_file $linux_file &>/dev/null \
    && echo "OK"
    
  # Go back and remove subdir if empty
  cd .. && rmdir $pkg 2>/dev/null
done

popd &>/dev/null; echo
