#!/bin/bash

# === Banner === #
banner () {
  clear
  echo "    ____  _                  "
  echo "   / __ \(_)___  ____ ___  __"
  echo "  / /_/ / / __ \/ __ \`/ / / /";
  echo " / ____/ / / / / /_/ / /_/ /    (by iWas <3)"
  echo "/_/   /_/_/ /_/\__, /\__,_/  "
  echo "              /____/         "
  echo "---------------------------------------------"
  sleep 2
}
banner

MAIN_PWD=$(pwd)

# === Ctrl + C === #
ctrl_c () {
  echo -e "\n[-] Process cancelled by user. Exiting...\n"
  tput cnorm; exit 1
}
trap ctrl_c INT

# === Hiding cursor === #
tput civis

# === 1. Sudo privileges === #
echo "[!] Checking current user..."
sleep 2
if [ "$EUID" -eq 0 ]; then
  echo "[-] Please do not run as ROOT."
  tput cnorm; exit 1
fi
echo "[+] Hello, $USER :D"
sleep 2
echo "[!] Checking if current session has sudo privileges..."
sudo pwd > /dev/null 2>&1
echo -e "[+] Sudo privileges obtained! Thank you <3\n"
sleep 2
# === END(1) === #

banner

# === 2. GRUB Configuration === #
echo "[*] Creating GRUB Custom Configuration file..."
sudo cp ./config/grub/grub /etc/default/grub
sleep 1
echo "[+] File written to: /etc/default/grub"
sleep 2

echo "[*] Setting GRUB Custom theme..."
sudo cp -r ./config/grub/CyberRe /boot/grub/themes/CyberRe
sleep 1
echo -e "[+] Theme copied correctly!\n"
sleep 2

GRUB_CMDLINE_LINUX="root=/dev/mapper/<ROOT_NAME> rd.luks.name=<ROOT_UUID>=<ROOT_NAME> rd.luks.name=<HOME_UUID>=<HOME_NAME> rd.luks.options=timeout=0 rootflags=x-systemd.device-timeout=0"

echo "[*] Showing disks and partitions..."
echo "-----------------------------------"
lsblk -np --output NAME,MOUNTPOINT
echo "-----------------------------------"

read -p "[?] Encrypted ROOT partition path (with /dev/...): " ROOT_PARTITION
read -p "[?] Decrypted ROOT partition name (e.g. cryptroot): " ROOT_NAME
read -p "[?] Encrypted HOME partition path (with /dev/...): " HOME_PARTITION
read -p "[?] Decrypted HOME partition name (e.g. crypthome): " HOME_NAME

banner

ROOT_UUID=$(sudo blkid $ROOT_PARTITION | grep -oP '(?<= UUID=").*?(?=")')
echo "[+] $ROOT_PARTITION -> UUID: $ROOT_UUID"
HOME_UUID=$(sudo blkid $HOME_PARTITION | grep -oP '(?<= UUID=").*?(?=")')
echo "[+] $HOME_PARTITION -> UUID: $HOME_UUID"

sleep 2
  
GRUB_CMDLINE_LINUX=$(echo "$GRUB_CMDLINE_LINUX" | sed "s/<ROOT_NAME>/$ROOT_NAME/g" | sed "s/<ROOT_UUID>/$ROOT_UUID/" | sed "s/<HOME_NAME>/$HOME_NAME/" | sed "s/<HOME_UUID>/$HOME_UUID/")

old_str="GRUB_CMDLINE_LINUX="""
new_str="GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX""

echo "$old_str"
sleep 5
echo "$new_str"
sleep 60

sudo sed -i "s/$old_str/$new_str/" /etc/default/grub

sleep 2

echo "[*] Generating GRUB Configuration..."
sudo grub-mkconfig -o /boot/grub/grub.cfg

sleep 2

echo "[+] GRUB Configured!"
# === END(2) === #

banner

# === 3. Official Packages Installation === #
for pkg in $(cat ./assets/pkgs/official_pkgs); do
  echo "[*] Installing official package '$pkg'..."
  sleep 2
  pacman -S --noconfirm $pkg
done
# === END(3) === #

banner

# === 4. AUR Packages Installation === #
for pkg in $(cat ./assets/pkgs/aur_pkgs); do
  echo "[*] Installing AUR package '$pkg'..."
  sleep 2
  yay -S --noconfirm --answerdiff=None $pkg
done
# === END(4) === #

banner

# === 5. From Source Programs Installation === #
cd /home/$USER

echo "[*] Compiling and Installing Bento4 Tools..."
sleep 2
# Bento4 Tools
cd ~/content
git clone "https://github.com/axiomatic-systems/Bento4"
cd Bento4
mkdir build
cd !$
cmake -DCMAKE_BUILD_TYPE=Release ..
make
make install
cd ../..
rm -rf Bento4

banner

echo "[*] Compiling and Installing GEF for GDB..."
sleep 2
# GEF (GDB Enhanced Features)
curl -fsSL "https://gef.blah.cat/sh" | bash

banner

echo "[*] Compiling and Installing Logiops..."
sleep 2
# logiops (Unofficial Logiech Options)
cd ~/content
git clone "https://github.com/PixlOne/logiops"
cd logiops
mkdir build
cd !$
cmake ..
make
make install
systemctl enable --now logid
cd ../..
rm -rf logiops
# === END(5) === #

banner

# === 6. ZSH Configuration === #
echo "[*] Configuring ZSH..."
sleep 2
cd $MAIN_PWD
sudo cp ./config/zsh/zshrc ~/.zshrc
sudo ln -s ~/.zshrc /root/.zshrc

sudo mkdir /usr/share/custom-zsh
sudo git clone "https://github.com/romkatv/powerlevel10k" /usr/share/custom-zsh/powerlevel10k
sudo cp ./config/zsh/p10k.zsh /usr/share/custom-zsh/.p10k.zsh
sudo git clone "https://github.com/zsh-users/zsh-syntax-highlighting" /usr/share/custom-zsh/zsh-syntax-highlighting
sudo git clone "https://github.com/zsh-users/zsh-autosuggestions" /usr/share/custom-zsh/zsh-autosuggestions
sudo mkdir /usr/share/custom-zsh/zsh-sudo
cd !$
sudo wget "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/sudo/sudo.plugin.zsh"
sleep 2
echo "[+] ZSH Configured!"
# === END(6) === #

banner

# === 7. Xorg Configuration === #
echo "[*] Configuring Xorg..."
sleep 2
cd $MAIN_PWD
sudo cp ./config/xorg/xinitrc /etc/X11/xinit/xinitrc
sudo cp ./config/xorg/xprofile ~/.xprofile
sleep 2
echo "[+] Xorg Configured!"
# === END(7) === #

banner

# === 8. Qtile Configuration === #
echo "[*] Configuring Qtile..."
sleep 2
cd $MAIN_PWD
cp -r ./config/qtile ~/.config/qtile
sleep 2
echo "[+] Qtile Configured!"
# === END(8) === #

banner

# === 9. Wallpapers === #
echo "[*] Configuring Wallpapers..."
sleep 2
cd $MAIN_PWD
sudo cp -r ./config/wallpapers /usr/share/wallpapers
sleep 2
echo "[+] Wallpapers Configured!"
# === END(9) === #

banner

echo "[+] Pingu Desktop Environment Fully Installed! :)"
tput cnorm; exit 0
