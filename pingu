#!/bin/bash

# === Banner === #
banner () {
  clear
  echo "    ____  _                  "
  echo "   / __ \(_)___  ____ ___  __"
  echo "  / /_/ / / __ \/ __ \`/ / / /";
  echo " / ____/ / / / / /_/ / /_/ /    (by iWas <3)"
  echo "/_/   /_/_/ /_/\__, /\__,_/  "
  echo "              /____/         "
  echo "---------------------------------------------"
  sleep 2
}
banner

# === Ctrl + C === #
ctrl_c () {
  echo -e "\n[-] Process cancelled by user. Exiting...\n"
  tput cnorm; exit 1
}
trap ctrl_c INT

# === Hiding cursor === #
tput civis

# === 0. Sudo privileges === #
echo "[!] Checking if current session has sudo privileges..."
sudo pwd > /dev/null 2>&1
echo -e "[+] Sudo privileges obtained! Thank you <3\n"
# === END(0) === #

banner

# === 1. User === #
unset USER
while [ -z "$USER" ]; do
  read -p "[?] What's your username: " $USER
done
# === END(1) === #

banner

# === 2. GRUB Configuration === #
echo "[*] Downloading GRUB Custom Configuration file..."
curl -s -X GET "https://raw.githubusercontent.com/iWas-Coder/Pingu/main/config/grub/grub" > /etc/default/grub
sleep 1
echo -e "[+] File written to: /etc/default/grub\n"

echo "[?] Are you using LUKS encryption?"
select option in "YES" "NO"; do
  case $option in
    YES ) LUKS=true; break;;
    NO ) LUKS=false; break;;
  esac
done

sleep 2

echo "[*] Showing disks and partitions..."
echo "-----------------------------------"
lsblk -np --output NAME,MOUNTPOINT
echo "-----------------------------------"

if [ "$LUKS" = true ]; then
  echo "[*] Modifying GRUB Configuration to decrypt partitions during boot..."

  unset ROOT_PARTITION
  while [ -z "$ROOT_PARTITION" ]; do
    read -p "[?] Encrypted ROOT partition (with /dev path): " $ROOT_PARTITION
  done
  unset HOME_PARTITION
  while [ -z "$HOME_PARTITION" ]; do
    read -p "[?] Encrypted HOME partition (with /dev path): " $HOME_PARTITION
  done
  
  ROOT_UUID=$(blkid $ROOT_PARTITION | grep -oP '(?<= UUID=").*?(?=")')
  echo "[+] $ROOT_PARTITION UUID: $ROOT_UUID"
  HOME_UUID=$(blkid $HOME_PARTITION | grep -oP '(?<= UUID=").*?(?=")')
  echo "[+] $HOME_PARTITION UUID: $HOME_UUID"
  
  
fi
# === END(2) === #

banner

# === 3. Official Packages Installation === #
for pkg in $(cat ./assets/pkgs/official_pkgs); do
  sleep 1
  echo "[*] Installing official package '$pkg'..."
  # pacman -S --noconfirm $pkg
  clear
done
# === END(3) === #

banner

# === 4. AUR Packages Installation === #
for pkg in $(cat ./assets/pkgs/aur_pkgs); do
  sleep 1
  echo "[*] Installing AUR package '$pkg'..."
  # yay -S --noconfirm --answerdiff=None $pkg
  clear
done
# === END(4) === #

banner

# === 5. From Source Programs Installation === #
cd /home/$USER

echo "[*] Compiling and Installing Bento4 Tools..."
sleep 2
# Bento4 Tools
git clone --quiet "https://github.com/axiomatic-systems/Bento4"
cd Bento4
mkdir build
cd !$
cmake -DCMAKE_BUILD_TYPE=Release ..
make
make install
cd ../..
rm -rf Bento4

banner

echo "[*] Compiling and Installing GEF for GDB..."
sleep 2
# GEF (GDB Enhanced Features)
curl -fsSL "https://gef.blah.cat/sh" | bash

banner

echo "[*] Compiling and Installing Logiops..."
sleep 2
# logiops (Unofficial Logiech Options)
git clone --quiet "https://github.com/PixlOne/logiops"
cd logiops
mkdir build
cd !$
cmake ..
make
make install
systemctl enable --now logid
cd ../..
rm -rf logiops
# === END(5) === #

banner

# === 6. ZSH Configuration === #
# === END(6) === #

# === 7. Xorg Configuration === #
# === END(7) === #

# === 8. LightDM Configuration === #
# === END(8) === #

# === 9. Qtile Configuration === #
# === END(9) === #
